/* Generated by Together */
package util.event;

import java.util.HashMap;
import java.util.Map;
import java.util.Vector;

/**
 * EventManager accepts events from event-throwers and sends them to the
 * appropriate listeners.
 * EventManager is a singleton. use EventManager.getInstance() to get an
 * instance.
 */
public class EventManager {
    /*
     *	Constructor for EventManager.
     */
    private EventManager() {
        listeners = new HashMap<>();
    }

    /**
     *	Throws an event and thereby notifies all subscribed listeners.
     * @param ev: the event that is thrown.
     * @post for each l in Listener
     * @post 	if(isListener(l, ev.getType()))
     * @post 		l.catchEvent(ev) has been called, unless l has been
     * @post								removed as listener in the process.
     */
    public void throwEvent(Event ev) {
        if (listeners.containsKey(ev.getClass())) {
            listeners.get(ev.getClass()).forEach(l -> l.catchEvent(ev));
        }
    }

    /**
     *	Registers l as listener for the given eventClass.
     * @param l: the listener that has to be registered
     * @param eventClass: the according event class
     * @throws IllegalArgumentException: eventClass is not a legal eventClass.
     * @throws 		!isValidEventType(eventClass)
     */
    public <T extends Event> void addListener(Listener l, Class<T> eventClass) throws
            IllegalArgumentException {

        if (listeners.containsKey(eventClass)) {
            listeners.get(eventClass).addElement(l);
        } else {
            Vector<Listener> v = new Vector<>();
            v.add(l);
            listeners.put(eventClass, v);
        }
    }

    /**
     *	Unregisters l as listener for every eventType
     * @param l: the listener that has to be removed.
     * @post l will be unregistered for every eventType
     * @post	for each eventType in Int where isValidEventType(eventType)
     * @post 		!isListener(l, eventType)
     */
    public void removeListener(Listener l) {
        for (Class<? extends Event> c : listeners.keySet()) {
            //noinspection StatementWithEmptyBody
            while (listeners.get(c).removeElement(l)) {}
        }
    }

    /**
     * Returns the singleton instance of EventManager.
     */
    public static EventManager getInstance() {
        if (manager == null) {
            manager = new EventManager();
        }
        return manager;
    }

    /*
     *	List of Vectors. 1 vector per eventType.
     */
    private final Map<Class<? extends Event>, Vector<Listener>> listeners;

    /*
     *	reference to the singleton instance of EventManager
     */
    private static EventManager manager = null;
}
